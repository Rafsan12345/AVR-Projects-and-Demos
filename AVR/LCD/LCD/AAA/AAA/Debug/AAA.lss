
AAA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000010a  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072a  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f2  00000000  00000000  00000956  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cf  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001218  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000314  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000141  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  7a:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <cmd>:
#include <util/delay.h>
#include <stdio.h>


void cmd(char a) {
	PORTC = a;
  82:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x20;
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	80 e7       	ldi	r24, 0x70	; 112
  8c:	92 e0       	ldi	r25, 0x02	; 2
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <cmd+0xc>
  96:	00 c0       	rjmp	.+0      	; 0x98 <cmd+0x16>
  98:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x00;
  9a:	12 ba       	out	0x12, r1	; 18
  9c:	08 95       	ret

0000009e <data>:
}

void data(char a) {
	PORTC = a;
  9e:	85 bb       	out	0x15, r24	; 21
	PORTD = 0xA0;
  a0:	80 ea       	ldi	r24, 0xA0	; 160
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	80 e7       	ldi	r24, 0x70	; 112
  a8:	92 e0       	ldi	r25, 0x02	; 2
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <data+0xc>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <data+0x16>
  b4:	00 00       	nop
	_delay_ms(100);
	PORTD = 0x80;
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	08 95       	ret

000000bc <display>:
}

void display(char *a) {
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	ec 01       	movw	r28, r24
	while((*a) != '\0') {
  c2:	03 c0       	rjmp	.+6      	; 0xca <display+0xe>
		data(*a);
  c4:	0e 94 4f 00 	call	0x9e	; 0x9e <data>
		a++;
  c8:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(100);
	PORTD = 0x80;
}

void display(char *a) {
	while((*a) != '\0') {
  ca:	88 81       	ld	r24, Y
  cc:	81 11       	cpse	r24, r1
  ce:	fa cf       	rjmp	.-12     	; 0xc4 <display+0x8>
		data(*a);
		a++;
	}
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <main>:



int main() {
	DDRD = 0xE0;
  d6:	80 ee       	ldi	r24, 0xE0	; 224
  d8:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00; PORTD = 0x00;
  da:	15 ba       	out	0x15, r1	; 21
  dc:	12 ba       	out	0x12, r1	; 18
	cmd(0x38);
  de:	88 e3       	ldi	r24, 0x38	; 56
  e0:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0x80);
  e4:	80 e8       	ldi	r24, 0x80	; 128
  e6:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0x01);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0x0E);
  f0:	8e e0       	ldi	r24, 0x0E	; 14
  f2:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0x06);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	0e 94 41 00 	call	0x82	; 0x82 <cmd>

	display("BUET IICT");
  fc:	80 e6       	ldi	r24, 0x60	; 96
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 5e 00 	call	0xbc	; 0xbc <display>
 104:	ff cf       	rjmp	.-2      	; 0x104 <main+0x2e>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
